@page

@{
    Layout = "H5VueLayuiLayout";
    ViewData["Title"] = "Howler.js Radio";
}
<div class="demoTable">
    搜索Name：
    <div class="layui-inline">
        <input class="layui-input" name="radioName" id="demoReload" autocomplete="off">
    </div>
    <button class="layui-btn" id="btnsearch" data-type="reload">搜索</button>
</div>
<div id="app">
    <ul id="demo">
        <li v-cloak v-for="(item, index) of slist">
            <div>
                <img v-bind:src="item.favicon" style="width:30px" onerror="this.style.display='none'">
                <a class="layui-btn layui-btn-xs" v-on:click="play(item)">播放</a>
                <a class="layui-btn layui-btn-xs" v-on:click="stop(item)">停止</a>
            </div>
        </li>

    </ul>
</div>



<script type="text/html" id="barDemo">
    <a class="layui-btn layui-btn-xs" lay-event="play">播放</a>
    <a class="layui-btn layui-btn-xs" lay-event="stop">停止</a>
</script>
<script type="text/html" id="radioIcon">
    <!-- 这里的 checked 的状态只是演示 -->
    <img src="{{d.favicon}}" style="width:30px" onerror="this.style.display='none'">

</script>

@section CSS{
}
@section Scripts{
    <script src="~/lib/howler/howler.js"></script>
    <script src="~/lib/qone/linq.js"></script>
    <script src="~/lib/qone/qone.js"></script>
    <script>
        //layui.use('table', function () {
        //    var table = layui.table;

        //    table.render({
        //        elem: '#test'
        //        , url: 'http://www.radio-browser.info/webservice/json/stations'
        //        , toolbar: '#toolbarDemo' //开启头部工具栏，并为其绑定左侧模板
        //        , defaultToolbar: ['filter', 'exports', 'print', { //自定义头部工具栏右侧图标。如无需自定义，去除该参数即可
        //            title: '提示'
        //            , layEvent: 'LAYTABLE_TIPS'
        //            , icon: 'layui-icon-tips'
        //        }]
        //        , title: '用户数据表'
        //        , cols: [[
        //            { type: 'checkbox', fixed: 'left' }
        //            , { field: 'id', title: 'ID', width: 80, fixed: 'left', unresize: true, sort: true }
        //            , { field: 'username', title: '用户名', width: 120, edit: 'text' }
        //            , {
        //                field: 'email', title: '邮箱', width: 150, edit: 'text', templet: function (res) {
        //                    return '<em>' + res.email + '</em>'
        //                }
        //            }
        //            , { field: 'sex', title: '性别', width: 80, edit: 'text', sort: true }
        //            , { field: 'city', title: '城市', width: 100 }
        //            , { field: 'sign', title: '签名' }
        //            , { field: 'experience', title: '积分', width: 80, sort: true }
        //            , { field: 'ip', title: 'IP', width: 120 }
        //            , { field: 'logins', title: '登入次数', width: 100, sort: true }
        //            , { field: 'joinTime', title: '加入时间', width: 120 }
        //            , { fixed: 'right', title: '操作', toolbar: '#barDemo', width: 150 }
        //        ]]
        //        , page: true
        //        , parseData: function (res) { //将原始数据解析成 table 组件所规定的数据
        //            return {
        //                "code": 0, //解析接口状态
        //                "msg": "", //解析提示文本
        //                "count": res.length, //解析数据长度
        //                "data": res //解析数据列表
        //            };
        //        }
        //    });

        //    //头工具栏事件
        //    table.on('toolbar(test)', function (obj) {
        //        var checkStatus = table.checkStatus(obj.config.id);
        //        switch (obj.event) {
        //            case 'getCheckData':
        //                var data = checkStatus.data;
        //                layer.alert(JSON.stringify(data));
        //                break;
        //            case 'getCheckLength':
        //                var data = checkStatus.data;
        //                layer.msg('选中了：' + data.length + ' 个');
        //                break;
        //            case 'isAll':
        //                layer.msg(checkStatus.isAll ? '全选' : '未全选');
        //                break;

        //            //自定义头工具栏右侧图标 - 提示
        //            case 'LAYTABLE_TIPS':
        //                layer.alert('这是工具栏右侧自定义的一个图标按钮');
        //                break;
        //        };
        //    });

        //    //监听行工具事件
        //    table.on('tool(test)', function (obj) {
        //        var data = obj.data;
        //        //console.log(obj)
        //        if (obj.event === 'del') {
        //            layer.confirm('真的删除行么', function (index) {
        //                obj.del();
        //                layer.close(index);
        //            });
        //        } else if (obj.event === 'edit') {
        //            layer.prompt({
        //                formType: 2
        //                , value: data.email
        //            }, function (value, index) {
        //                obj.update({
        //                    email: value
        //                });
        //                layer.close(index);
        //            });
        //        }
        //    });
        //});
    </script>
    <script type="text/javascript">
        var table;
        var sound;
        var app = new Vue({
            el: '#app',
            data: {
                isActive: false,
                selected: -1,
                selectedlist: {},
                slist: [],
                searchlist: [],
                pageCurrent: 1,
                pageAll: 20,
                totalBoxcChecked: false, //是否全选
                checkedList: [], //双向数据绑定的数组，我是用的id
                list: []
            },
            created() {
                layui.use('flow', function () {
                    var $ = layui.jquery; //不用额外加载jQuery，flow模块本身是有依赖jQuery的，直接用即可。
                    var flow = layui.flow;
                    flow.load({
                        elem: '#demo' //指定列表容器
                        , mb: 1
                        , isAuto: false
                        , isLazyimg: true
                        , done: function (page, next) { //到达临界点（默认滚动触发），触发下一页
                            var lis = [];
                            //以jQuery的Ajax请求为例，请求下一页数据（注意：page是从2开始返回）
                            $.get('http://www.radio-browser.info/webservice/json/stations?page="+ page+"&limit=30', function (res) {
                                //假设你的列表返回在data集合中
                                //layui.each(res, function (index, item) {
                                //    lis.push('<li>' + item.title + '</li>');
                                lis = res;
                                app.setSlist(res);
                                //执行下一页渲染，第二参数为：满足“加载更多”的条件，即后面仍有分页
                                //pages为Ajax返回的总页数，只有当前页小于总页数的情况下，才会继续出现加载更多
                                next('', false);
                            });
                        }
                    });
                });

            },
            mounted() {
                //layui.use('flow', function () {
                //       var $ = layui.jquery; //不用额外加载jQuery，flow模块本身是有依赖jQuery的，直接用即可。
                //       var flow = layui.flow;
                //       flow.load({
                //           elem: '#demo' //指定列表容器
                //           , mb: 100
                //            ,isAuto: false
                //           ,isLazyimg: true
                //           , done: function (page, next) { //到达临界点（默认滚动触发），触发下一页
                //               var lis = [];
                //               //以jQuery的Ajax请求为例，请求下一页数据（注意：page是从2开始返回）
                //               $.get('http://www.radio-browser.info/webservice/json/stations?page=' + page, function (res) {
                //                   //假设你的列表返回在data集合中
                //                   layui.each(res.data, function (index, item) {
                //                       lis.push('<li>' + item.title + '</li>');
                //                   });

                //                   //执行下一页渲染，第二参数为：满足“加载更多”的条件，即后面仍有分页
                //                   //pages为Ajax返回的总页数，只有当前页小于总页数的情况下，才会继续出现加载更多
                //                   next(lis.join(''), page < res.pages);
                //               });
                //           }
                //       });
                //   });
                //this.getstations();
            },
            computed: {
                indexs() {
                    var left = 1;
                    var right = this.pageAll;
                    var arr = [];
                    if (this.pageAll >= 7) {
                        if (this.pageCurrent > 4 && this.pageCurrent < this.pageAll - 3) {
                            left = this.pageCurrent - 3;
                            right = this.pageCurrent + 3;
                        } else if (this.pageCurrent <= 4) {
                            left = 1;
                            right = 7;
                        } else {
                            left = this.pageAll - 6;
                            right = this.pageAll;
                        }
                    }
                    while (left <= right) {
                        arr.push(left);
                        left++;
                    }
                    return arr;
                }
            },
            methods: {
                getstations() {

                    //$.ajax({
                    //    type: "get",
                    //    url: "http://www.radio-browser.info/webservice/json/stations?page=1&limit=30",
                    //    dataType: "json",
                    //    //data: urlData,
                    //    async: true,
                    //    success: function (jsonResult) {
                    //        app.setSlist(jsonResult);

                    //    },
                    //    error: function (e) {
                    //        console.log(e);
                    //    }
                    //});
                },
                setSlist(arr) {
                    this.slist = arr;
                }

            },
            watch: {
                pageCurrent: function (newValue, oldValue) {
                    console.log(arguments);
                },
                checkedList() {
                    if (this.checkedList.length == this.list.length) {
                        this.totalBoxcChecked = true;
                    } else {
                        this.totalBoxcChecked = false;
                    }
                }
            }
        })




    </script>

}
